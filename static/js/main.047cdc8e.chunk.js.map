{"version":3,"sources":["seabottle.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","currAccount","setCurrentAccount","contractAddress","contractABI","abiObj","abi","covidMessage","setCovidMessage","checkIfWalletIsConnected","ethereum","window","console","log","request","method","then","accounts","length","account","getAllWaves","wave","message","a","provider","ethers","providers","Web3Provider","signer","getSigner","waveportalContract","Contract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","allWaves","setAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","reverse","on","from","oldArray","className","onSubmit","e","preventDefault","type","placeholder","id","name","value","onChange","target","required","onClick","alert","catch","err","map","index","src","bottle","toString","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.047cdc8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/seabottle.de87c146.jpg\";","import * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport abiObj from \"./utils/WavePortal.json\";\nimport bottle from \"./seabottle.jpg\";\n\nexport default function App() {\n  // Just a state variable we use to store our user's public wallet address\n  const [currAccount, setCurrentAccount] = React.useState(\"\");\n  const contractAddress = \"0x1125Bfc01daeaa3a9Ef1D0E3009c43DAA973F049\";\n\n  const contractABI = abiObj.abi;\n  const [covidMessage, setCovidMessage] = React.useState(\"\");\n\n  const checkIfWalletIsConnected = () => {\n    // First make sure we have access to window.ethereum\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // Check if we're authorized to access the user's wallet\n    ethereum.request({ method: \"eth_accounts\" }).then((accounts) => {\n      // We could have multiple accounts. Check for one.\n      if (accounts.length !== 0) {\n        // Grab the first account we have access to.\n        const account = accounts[0];\n        console.log(\"Found an authorized account: \", account);\n\n        // Store the users public wallet address for later!\n        setCurrentAccount(account);\n\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    });\n  };\n\n  const connectWallet = () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"Get metamask!\");\n    }\n\n    ethereum\n      .request({ method: \"eth_requestAccounts\" })\n      .then((accounts) => {\n        console.log(\"Connected\", accounts[0]);\n        setCurrentAccount(accounts[0]);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // This runs our function when the page loads.\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const wave = async (message) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const waveportalContract = new ethers.Contract(\n      contractAddress,\n      contractABI,\n      signer\n    );\n\n    let count = await waveportalContract.getTotalWaves();\n    console.log(\"Retrieved total wave count...\", count.toNumber());\n\n    const waveTxn = await waveportalContract.wave(message, {\n      gasLimit: 300000,\n    });\n    console.log(\"Mining...\", waveTxn.hash);\n    await waveTxn.wait();\n    console.log(\"Mined -- \", waveTxn.hash);\n\n    count = await waveportalContract.getTotalWaves();\n    console.log(\"Retrieved total wave count...\", count.toNumber());\n  };\n\n  const [allWaves, setAllWaves] = React.useState([]);\n  async function getAllWaves() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const waveportalContract = new ethers.Contract(\n      contractAddress,\n      contractABI,\n      signer\n    );\n\n    let waves = await waveportalContract.getAllWaves();\n\n    let wavesCleaned = [];\n    waves.forEach((wave) => {\n      wavesCleaned.push({\n        address: wave.waver,\n        timestamp: new Date(wave.timestamp * 1000),\n        message: wave.message,\n      });\n    });\n\n    setAllWaves(wavesCleaned.reverse());\n\n    waveportalContract.on(\"NewWave\", (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((oldArray) => [\n        ...oldArray,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    });\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (covidMessage) {\n      wave(covidMessage);\n      setCovidMessage(\"\");\n    } else {\n      console.log(\"You haven't entered a covid message!\");\n    }\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">Pandemic in a Bottle ✉️🍾</div>\n\n        <div className=\"bio\">\n          What is the one key insight you want future generations 100+ years\n          from now to know, about how humans have dealt with the COVID-19\n          pandemic?\n          <br />\n          <br />\n          Your message will be stored forever on the Ethereum blockchain, so\n          make it count.\n        </div>\n\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <textarea\n            type=\"text\"\n            placeholder=\"Enter message to future generations\"\n            id=\"covidMessage\"\n            className=\"covidMessage\"\n            name=\"covidMessage\"\n            value={covidMessage}\n            onChange={(e) => setCovidMessage(e.target.value)}\n            required\n          ></textarea>\n\n          <button className=\"waveButton\">Wave Goodbye to Covid 👋</button>\n        </form>\n\n        {currAccount ? null : (\n          <button className=\"connectWalletButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div className=\"messageContainer\">\n              <div className=\"messageImageContainer\">\n                <div className=\"avatarImageWrapper\">\n                  <img src={bottle} className=\"avatarImage\"></img>\n                </div>\n              </div>\n              <div className=\"messageDetailsContainer\">\n                <div className=\"address\">Address: {wave.address}</div>\n                <div className=\"time\">Time: {wave.timestamp.toString()}</div>\n                <div className=\"storedMessage\">Message: {wave.message}</div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}